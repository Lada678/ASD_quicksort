exit_button = 'c'

while exit_button != 'q':

    # function for partition the array on parts
    # function takes as parameters arr(list), low (lower stage),
    # high (higher stage)

    def partition(array, low, high):

        lower_element = (low - 1)  # index of low element
        pivot = array[high]  # pivot

        for j in range(low, high):

            # If current element is smaller than or
            # equal to pivot
            if array[j] <= pivot:
                # increment index of smaller element
                lower_element += 1
                array[lower_element] = array[j]
                array[j] = array[lower_element]

        array[lower_element + 1], array[high] = array[high], array[lower_element + 1]
        return lower_element + 1


    # quick sort function
    def quick_sort(array, low, high):

        if low <= high:
            # pi is partitioning index, arr[p] is now
            # at right place
            pi = partition(array, low, high)

            # Separately sort elements before
            # partition and after partition
            quick_sort(array, low, pi - 1)
            quick_sort(array, pi + 1, high)


    arr = []  # array
    amount_of_array_elements = int(input("Enter the amount of array elements:\n"))  # amount of array elements

    #  fill in array
    for i in range(amount_of_array_elements):
        new_file = int(input("Enter the element:\n"))  # input the value
        arr.append(new_file)  # append this value to list

    quick_sort(arr, 0, amount_of_array_elements - 1)  # quick sort

    print("\nSorted array is:")
    for i in range(amount_of_array_elements):
        print(arr[i], end=' ')

    exit_button = input("\n\nPress <<q>> to exit or any else button to continue:\n")
